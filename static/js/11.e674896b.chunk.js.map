{"version":3,"file":"static/js/11.e674896b.chunk.js","mappings":"sPAGaA,GAAgBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,8FAGP,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGPC,EAAYL,EAAAA,GAAAA,MAAH,qSACF,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACH,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAMW,SAAAF,GAAC,OAAIA,EAAEC,MAAMG,OAAOC,IAAnB,IACd,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,MAAZ,IAIc,SAAAN,GAAC,OAAIA,EAAEC,MAAMG,OAAOG,QAAnB,IAIpBC,GAAYV,EAAAA,EAAAA,IAAOW,EAAAA,GAAPX,CAAH,+NAET,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACQ,SAAAF,GAAC,OAAIA,EAAEC,MAAMG,OAAOC,IAAnB,IACJ,SAAAL,GAAC,OAAIA,EAAEC,MAAMS,MAAMC,MAAlB,GAGhBR,GACgB,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,OAAOG,QAAnB,GAGjBJ,GACgB,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,OAAOG,QAAnB,IAIRK,EAAad,EAAAA,GAAAA,OAAH,uQAEV,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACK,SAAAF,GAAC,OAAIA,EAAEC,MAAMS,MAAMC,MAAlB,IAEE,SAAAX,GAAC,OAAIA,EAAEC,MAAMG,OAAOC,IAAnB,IACP,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,MAAZ,IACN,SAAAN,GAAC,OAAIA,EAAEC,MAAMG,OAAOS,KAAnB,IACK,SAAAb,GAAC,OAAIA,EAAEC,MAAMa,YAAYC,IAAxB,IAMM,SAAAf,GAAC,OAAIA,EAAEC,MAAMG,OAAOG,QAAnB,I,6BCjDnBS,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,SAAS,0BAC5BC,MAAOJ,EAAAA,KAAaI,QAAQD,SAAS,2BACrCE,SAAUL,EAAAA,KAEPM,IAAI,EAAG,gDACPH,SAAS,gCAGRI,EAAgB,CAAEL,KAAM,GAAIE,MAAO,GAAIC,SAAU,IAE1CG,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,SAAC,KAAD,CACEH,cAAeA,EACfI,iBAAkBZ,EAClBa,SATiB,SAACC,EAAaC,GACjCL,GAASM,EAAAA,EAAAA,IAASF,IAClBC,EAAOE,WACR,EAGC,UAKE,UAAC,EAAD,YACE,UAAC,EAAD,CAAcC,QAAQ,OAAtB,kBAEE,SAAC,EAAD,CAAcC,KAAK,OAAOhB,KAAK,UAC/B,SAAC,KAAD,CAAcA,KAAK,OAAOiB,OAAQ,SAAAC,GAAG,OAAIC,EAAAA,OAAAA,QAAeD,EAAnB,QAEvC,UAAC,EAAD,CAAcH,QAAQ,QAAtB,mBAEE,SAAC,EAAD,CAAcC,KAAK,QAAQhB,KAAK,WAChC,SAAC,KAAD,CAAcA,KAAK,QAAQiB,OAAQ,SAAAC,GAAG,OAAIC,EAAAA,OAAAA,QAAeD,EAAnB,QAExC,UAAC,EAAD,CAAcH,QAAQ,WAAtB,sBAEE,SAAC,EAAD,CAAcC,KAAK,WAAWhB,KAAK,cACnC,SAAC,KAAD,CAAcA,KAAK,WAAWiB,OAAQ,SAAAC,GAAG,OAAIC,EAAAA,OAAAA,QAAeD,EAAnB,QAE3C,SAAC,EAAD,CAAeF,KAAK,SAApB,0BAIP,E,UCnCD,EAdiB,WACf,OACE,SAAC,IAAD,CACEnC,EAAG,EACHuC,QAAQ,OACRC,eAAe,SACfC,WAAW,SACXC,cAAc,SALhB,UAOE,SAACjB,EAAD,KAGL,C","sources":["components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormOfContact = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: ${p => p.theme.space[3]}px;\n`;\n\nexport const LabelForm = styled.label`\n  padding-bottom: ${p => p.theme.space[2]}px;\n  margin-right: ${p => p.theme.space[2]}px;\n  width: 360px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  text-decoration: overline ${p => p.theme.colors.pink};\n  text-shadow: ${p => p.theme.shadow};\n\n  &:hover,\n  &:focus {\n    text-decoration: overline ${p => p.theme.colors.darkPink};\n  }\n`;\n\nexport const InputForm = styled(Field)`\n  width: 270px;\n  padding: ${p => p.theme.space[3]}px;\n  border: 2px solid ${p => p.theme.colors.pink};\n  border-radius: ${p => p.theme.radii.normal};\n  outline: none;\n\n  ${LabelForm}:hover & {\n    border-color: ${p => p.theme.colors.darkPink};\n  }\n\n  ${LabelForm}:focus & {\n    border-color: ${p => p.theme.colors.darkPink};\n  }\n`;\n\nexport const ButtonForm = styled.button`\n  width: auto;\n  padding: ${p => p.theme.space[3]}px;\n  border-radius: ${p => p.theme.radii.normal};\n  border: none;\n  background-color: ${p => p.theme.colors.pink};\n  box-shadow: ${p => p.theme.shadow};\n  color: ${p => p.theme.colors.white};\n  font-weight: ${p => p.theme.fontWeights.bold};\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: ${p => p.theme.colors.darkPink};\n  }\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport * as SC from './RegisterForm.styled';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nconst schema = yup.object().shape({\n  name: yup.string().required('Please enter your name'),\n  email: yup.string().email().required('Please enter your email'),\n  password: yup\n    .string()\n    .min(6, 'Password must contain at least 6 characters ')\n    .required('Please enter your password'),\n});\n\nconst initialValues = { name: '', email: '', password: '' };\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const onSubmitForm = (credentials, action) => {\n    dispatch(register(credentials));\n    action.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={onSubmitForm}\n    >\n      <SC.FormOfContact>\n        <SC.LabelForm htmlFor=\"name\">\n          Name\n          <SC.InputForm type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" render={msg => Notify.warning(msg)} />\n        </SC.LabelForm>\n        <SC.LabelForm htmlFor=\"email\">\n          Email\n          <SC.InputForm type=\"email\" name=\"email\" />\n          <ErrorMessage name=\"email\" render={msg => Notify.warning(msg)} />\n        </SC.LabelForm>\n        <SC.LabelForm htmlFor=\"password\">\n          Password\n          <SC.InputForm type=\"password\" name=\"password\" />\n          <ErrorMessage name=\"password\" render={msg => Notify.warning(msg)} />\n        </SC.LabelForm>\n        <SC.ButtonForm type=\"submit\">Register</SC.ButtonForm>\n      </SC.FormOfContact>\n    </Formik>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm';\nimport { Box } from 'constants';\n\nconst Register = () => {\n  return (\n    <Box\n      p={3}\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      flexDirection=\"column\"\n    >\n      <RegisterForm />\n    </Box>\n  );\n};\n\nexport default Register;\n"],"names":["FormOfContact","styled","Form","p","theme","space","LabelForm","colors","pink","shadow","darkPink","InputForm","Field","radii","normal","ButtonForm","white","fontWeights","bold","schema","yup","shape","name","required","email","password","min","initialValues","RegisterForm","dispatch","useDispatch","validationSchema","onSubmit","credentials","action","register","resetForm","htmlFor","type","render","msg","Notify","display","justifyContent","alignItems","flexDirection"],"sourceRoot":""}